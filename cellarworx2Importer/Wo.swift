import Foundation
public class Wo: PFObject, PFSubclassing
{
    public static func parseClassName() -> String {
        return "Wo"
    }
    public enum typeEnum : String {
        case OTHER
        case PUMP_OVER
        case PUNCH_DOWN
        case PRESSOFF
        case ADDITION
        case SCP
        case BLENDING
        case BOTTLING
        case FILTRATION
        case RACKING
        case SETTLING
        case BLEEDOFF
        case TOPPING
        case DRYICE
        case LAB_TEST
        case BOL
        case VINEYARD
        case PULL_SAMPLE
        case BBL_DOWN
        case HEAT_TANK
        case DUMP
        case STIR
        case BRIXTEMP
    }
    public enum vesseltypeEnum : String {
        case TANK
        case TBIN
        case BBL
        case PORTA
    }
    public enum timeslotEnum : String {
        case MORNING
        case NOON
        case EVENING
    }
    public enum strengthEnum : String {
        case LIGHT
        case MEDIUM
        case HEAVY
    }
    public enum statusEnum : String {
        case PENDING
        case ASSIGNED
        case WAITING_ON_CUSTOMER
        case HOLD
        case COMPLETED
        case TEMPLATE
    }
    public enum workperformedbyEnum : String {
        case CCC
        case CLIENT
    }
    public enum startslotEnum : String {
        case MORNING
        case NOON
        case EVENING
    }
    public enum endslotEnum : String {
        case MORNING
        case NOON
        case EVENING
    }

    // DateTime
    @NSManaged public var dueDate : NSDate
    @NSManaged public var completionDate : NSDate?
    @NSManaged public var completeBy : NSDate?
    
    //  Strings 
    @NSManaged public var alert : String
    @NSManaged public var assignedto : String
    @NSManaged public var clientcode : String
    @NSManaged public var completeby : String
    @NSManaged public var completeddescription : String
    @NSManaged public var lotNumber : String
    @NSManaged public var otherdesc : String
    @NSManaged public var requestor : String
    @NSManaged public var samplevolume : String
    @NSManaged public var toppinglot : String
    @NSManaged public var vesselid : String

    //  Bools
    @NSManaged public var autogenerated : Bool
    @NSManaged public var brixtemp : Bool
    @NSManaged public var deleted : Bool
    @NSManaged public var dryice : Bool
    @NSManaged public var evening : Bool
    @NSManaged public var inventoryadjusted : Bool
    @NSManaged public var morning : Bool
    @NSManaged public var noon : Bool

    //  Floats
    @NSManaged public var cost : Float
    @NSManaged public var endingbarrelcount : Float
    @NSManaged public var endingtankgallons : Float
    @NSManaged public var stattemp : Float

    //  Ints
    @NSManaged public var additionid : Int
    @NSManaged public var assetsid : Int
    @NSManaged public var autotag : Int
    @NSManaged public var brix : Int
    @NSManaged public var duration : Int
    @NSManaged public var endingtoppinggallons : Int
    @NSManaged public var fermprotid : Int
    @NSManaged public var id : Int
    @NSManaged public var labtestid : Int
    @NSManaged public var relatedadditionsid : Int
    @NSManaged public var relatedlabtestid : Int
    @NSManaged public var sampleqty : Int
    @NSManaged public var scpid : Int
    @NSManaged public var so2add : Int
    @NSManaged public var taskid : Int
    @NSManaged public var workareaid : Int

    //  Enums
    @NSManaged private var endslot_p : String // endslotEnum
    @NSManaged private var startslot_p : String // startslotEnum
    @NSManaged private var status_p : String // statusEnum
    @NSManaged private var strength_p : String // strengthEnum
    @NSManaged private var timeslot_p : String // timeslotEnum
    @NSManaged private var type_p : String // typeEnum
    @NSManaged private var vesseltype_p : String // vesseltypeEnum
    @NSManaged private var workperformedby_p : String // workperformedbyEnum

    // Relationships
    @NSManaged public var lot : Lot
    
    //  Enum Getters & Setters

    public var endslot : endslotEnum {
        get {
            return endslotEnum(rawValue : endslot_p)!
        }
        set {
            endslot_p = newValue.rawValue
        }
    }

    public var startslot : startslotEnum {
        get {
            return startslotEnum(rawValue : startslot_p)!
        }
        set {
            startslot_p = newValue.rawValue
        }
    }

    public var status : statusEnum {
        get {
            return statusEnum(rawValue : status_p)!
        }
        set {
            status_p = newValue.rawValue
        }
    }

    public var strength : strengthEnum {
        get {
            return strengthEnum(rawValue : strength_p)!
        }
        set {
            strength_p = newValue.rawValue
        }
    }

    public var timeslot : timeslotEnum {
        get {
            return timeslotEnum(rawValue : timeslot_p)!
        }
        set {
            timeslot_p = newValue.rawValue
        }
    }

    public var type : typeEnum {
        get {
            return typeEnum(rawValue : type_p)!
        }
        set {
            type_p = newValue.rawValue
        }
    }

    public var vesseltype : vesseltypeEnum {
        get {
            return vesseltypeEnum(rawValue : vesseltype_p)!
        }
        set {
            vesseltype_p = newValue.rawValue
        }
    }

    public var workperformedby : workperformedbyEnum {
        get {
            return workperformedbyEnum(rawValue : workperformedby_p)!
        }
        set {
            workperformedby_p = newValue.rawValue
        }
    }
}
